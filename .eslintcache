{"D:\\Program Files\\vscode\\webpack-demo\\webpack.parts.js":{"size":549,"mtime":1501044568399,"hashOfConfig":"1fho61v","results":{"filePath":"D:\\Program Files\\vscode\\webpack-demo\\webpack.parts.js","messages":[],"errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0}},"D:\\Program Files\\vscode\\webpack-demo\\app\\component.js":{"size":147,"mtime":1500961134201,"hashOfConfig":"1fho61v","results":{"filePath":"D:\\Program Files\\vscode\\webpack-demo\\app\\component.js","messages":[],"errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"output":"export default (text = 'hello world') => {\r\n    const element = document.createElement('div');\r\n    element.innerHTML = text;\r\n    return element;\r\n};\r\n"}},"D:\\Program Files\\vscode\\webpack-demo\\app\\index.js":{"size":77,"mtime":1500961112623,"hashOfConfig":"1fho61v","results":{"filePath":"D:\\Program Files\\vscode\\webpack-demo\\app\\index.js","messages":[],"errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"output":"import component from './component';\r\n\r\ndocument.body.appendChild(component());"}},"D:\\Program Files\\vscode\\webpack-demo\\webpack.config.js":{"size":2539,"mtime":1501044654097,"hashOfConfig":"1fho61v","results":{"filePath":"D:\\Program Files\\vscode\\webpack-demo\\webpack.config.js","messages":[],"errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"output":"const path = require('path');\r\nconst HtmlWebpackPlugin = require('html-webpack-plugin');\r\n\r\nconst PATHS = {\r\n    app: path.resolve(__dirname, 'app'),\r\n    build: path.resolve(__dirname, 'build'),\r\n};\r\n\r\n// module.exports = {\r\n//     // Entries have to resolve to files! They rely on Node\r\n//     // convention by default so if a directory contains *index.js*,\r\n//     // it resolves to that.\r\n//     entry: {\r\n//         app: PATHS.app\r\n//     },\r\n//     output: {\r\n//         path: PATHS.build,\r\n//         filename: \"[name].js\"\r\n//     },\r\n//     plugins: [\r\n//         new HtmlWebpackPlugin({\r\n//             title: \"Webpack Demo\"\r\n//         })\r\n//     ]\r\n// };\r\n\r\nconst commonConfig = {\r\n    // Entries have to resolve to files! They rely on Node\r\n    // convention by default so if a directory contains *index.js*,\r\n    // it resolves to that.\r\n    entry: {\r\n        app: PATHS.app,\r\n    },\r\n    output: {\r\n        path: PATHS.build,\r\n        filename: '[name].js',\r\n    },\r\n    plugins: [\r\n        new HtmlWebpackPlugin({\r\n            title: 'Webpack Demo',\r\n        }),\r\n    ],\r\n};\r\n\r\nconst productionConfig = () => commonConfig;\r\n\r\nconst developmentConfig = () => {\r\n    const config = {\r\n        module: {\r\n            rules: [\r\n                {\r\n                    test: /\\.js$/,\r\n                    enforce: 'pre',\r\n                    loader: 'eslint-loader',\r\n                    options: {\r\n                        emitWarning: true,\r\n                    },\r\n                },\r\n            ],\r\n        },\r\n        devServer: {\r\n            // overlay: true is equivalent\r\n            overlay: {\r\n                errors: true,\r\n                warnings: true,\r\n            },\r\n            // Enable history API fallback so HTML5 History API based\r\n            // routing works. Good for complex setups\r\n            historyApiFallback: true,\r\n            // Display only errors to reduce the amount of output.\r\n            stats: 'errors-only',\r\n            // Parse host and port from env to allow customization.\r\n            //\r\n            // If you use Docker, Vagrant or Cloud9, set\r\n            // host: options.host || '0.0.0.0';\r\n            //\r\n            // 0.0.0.0 is available to all network devices\r\n            // unlike default `localhost`.\r\n            host: process.env.HOST,\r\n            port: process.env.PORT,\r\n        },\r\n    };\r\n\r\n    return Object.assign({}, commonConfig, config);\r\n};\r\n\r\nmodule.exports = env => {\r\n    // console.log(\"env:\", env);\r\n    // return commonConfig;\r\n    if (env === 'production') {\r\n        return productionConfig();\r\n    }\r\n    return developmentConfig();\r\n};\r\n"}}}